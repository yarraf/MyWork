//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ratp.Hidalgo.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using Data.Contract.Entities;
    using Properties;
    using Core;

    public partial class RatpHidalgoEntities : ExtendedDbContext
    {
        public RatpHidalgoEntities(string connectionString)
           : base(ExtendedDbContext.GetConnectionString(connectionString, Resource1.AssemblyName, Resource1.EdmxName))
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<NatureTravaux> NatureTravauxSet { get; set; }
        public virtual DbSet<NatureTravauxExternes> NatureTravauxExternes { get; set; }
        public virtual DbSet<ParametresHidalgo> ParametresHidalgo { get; set; }
        public virtual DbSet<ParametresProgrammation> ParametresProgrammation { get; set; }
        public virtual DbSet<TypeOuvrage> TypeOuvrageSet { get; set; }
        public virtual DbSet<Programmations> Programmations { get; set; }
        public virtual DbSet<ProgrammationDetails> ProgrammationDetails { get; set; }
        public virtual DbSet<ProgrammationDocumentPGE> ProgrammationDocumentPGE { get; set; }
        public virtual DbSet<DocumentPgeTravauxAnnees> DocumentPgeTravauxAnnees { get; set; }
        public virtual DbSet<ProgrammationValeurParametresDocument> ProgrammationValeurParametresDocument { get; set; }
        public virtual DbSet<Causes> Causes { get; set; }
        public virtual DbSet<Descriptions> Descriptions { get; set; }
        public virtual DbSet<Desordres> Desordres { get; set; }
        public virtual DbSet<Documents> Documents { get; set; }
        public virtual DbSet<DesordresDocuments> DesordresDocuments { get; set; }
        public virtual DbSet<DocumentsLies> DocumentsLies { get; set; }
        public virtual DbSet<NaturesTravaux> NaturesTravaux { get; set; }
        public virtual DbSet<FamillesDesordres> FamillesDesordres { get; set; }
        public virtual DbSet<FamillesDesordresTypes> FamillesDesordresTypes { get; set; }
        public virtual DbSet<GroupesOuvrages> GroupesOuvrages { get; set; }
        public virtual DbSet<Lieux> Lieux { get; set; }
        public virtual DbSet<FamillesLignes> FamillesLignes { get; set; }
        public virtual DbSet<Lignes> Lignes { get; set; }
        public virtual DbSet<Localisations> Localisations { get; set; }
        public virtual DbSet<Ouvrages> Ouvrages { get; set; }
        public virtual DbSet<GpeOuvragesComposition> GpeOuvragesComposition { get; set; }
        public virtual DbSet<PlanificationComposition> PlanificationComposition { get; set; }
        public virtual DbSet<PlanificationGroupeOuvrage> PlanificationGroupeOuvrage { get; set; }
        public virtual DbSet<Planification> Planification { get; set; }
        public virtual DbSet<PlanificationsTypes> PlanificationsTypes { get; set; }
        public virtual DbSet<ProcesVerbaux> ProcesVerbaux { get; set; }
        public virtual DbSet<ReferencesTypes> ReferencesTypes { get; set; }
        public virtual DbSet<Secteurs> Secteurs { get; set; }
        public virtual DbSet<StatutsDesordres> StatutsDesordres { get; set; }
        public virtual DbSet<StatutsDocuments> StatutsDocuments { get; set; }
        public virtual DbSet<DesordreNotesTypes> DesordreNotesTypes { get; set; }
        public virtual DbSet<DesordresInfos> DesordresInfos { get; set; }
        public virtual DbSet<LieuxTypes> LieuxTypes { get; set; }
        public virtual DbSet<TypesInformations> TypesInformations { get; set; }
        public virtual DbSet<TypesOuvrages> TypesOuvrages { get; set; }
        public virtual DbSet<TypesProcesVerbaux> TypesProcesVerbaux { get; set; }
        public virtual DbSet<TypesSurveillances> TypesSurveillances { get; set; }
        public virtual DbSet<Utilisateurs> Utilisateurs { get; set; }
        public virtual DbSet<Validations> Validations { get; set; }
        public virtual DbSet<ValidationsDocuments> ValidationsDocuments { get; set; }
        public virtual DbSet<ValidationsProcesVerbaux> ValidationsProcesVerbaux { get; set; }
        public virtual DbSet<Categorie> Categorie { get; set; }
        public virtual DbSet<CoefficientPonderationParametresCriteresCalibrage> CoefficientPonderationParametresCriteresCalibrage { get; set; }
        public virtual DbSet<DataAnnexe> DataAnnexe { get; set; }
        public virtual DbSet<Criteres> Criteres { get; set; }
        public virtual DbSet<SeuilHidalgo> SeuilHidalgo { get; set; }
    
        public virtual int GetAllDocumentPgeWithNoteMax(Nullable<int> idFamilleDesordre, Nullable<int> idNatureCalibrage)
        {
            var idFamilleDesordreParameter = idFamilleDesordre.HasValue ?
                new ObjectParameter("idFamilleDesordre", idFamilleDesordre) :
                new ObjectParameter("idFamilleDesordre", typeof(int));
    
            var idNatureCalibrageParameter = idNatureCalibrage.HasValue ?
                new ObjectParameter("idNatureCalibrage", idNatureCalibrage) :
                new ObjectParameter("idNatureCalibrage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllDocumentPgeWithNoteMax", idFamilleDesordreParameter, idNatureCalibrageParameter);
        }
    }
}
